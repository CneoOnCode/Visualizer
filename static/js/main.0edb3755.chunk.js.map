{"version":3,"sources":["Pages/Graph/GraphUtil.ts","Pages/Graph/GraphForm.tsx","Pages/Graph/GraphModalForm.tsx","Pages/Graph/GraphView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["validation","values","graph","errors","input","JSON","parse","error","Array","isArray","length","some","subArray","invalidInput","initialValues","GraphForm","save","validate","onSubmit","edges","nodes","links","set","Set","forEach","edge","node1","node2","add","id","push","source","target","temp","from","convertEdgesToLink","map","arr","item","stringify","handleSubmit","className","type","name","disabled","Object","keys","component","GraphModalForm","getGraph","useState","show","setShow","title","handleClose","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","myConfig","automaticRearrangeAfterDropNode","nodeHighlightBehavior","height","window","innerHeight","width","innerWidth","node","color","size","highlightStrokeColor","link","highlightColor","data","GraphView","state","setstate","console","log","config","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oOA2BaA,EAAa,SAACC,GACzB,IAWQC,EAAUD,EAAVC,MACFC,EAAiB,GAIvB,OAHKD,IAbgB,SAACE,GACpB,IAAIF,EACJ,IACEA,EAAQG,KAAKC,MAAMF,GACnB,MAAOG,GACP,OAAO,EAET,OAAKC,MAAMC,QAAQP,IAA2B,IAAjBA,EAAMQ,QACdR,EAAMS,MAAK,SAACC,GAAD,OAAeJ,MAAMC,QAAQG,IAAaA,EAASF,OAAS,KAKhFG,CAAaX,KACzBC,EAAOD,MAAQ,oCAEVC,G,OCzCHW,EAAwB,CAAEZ,MAAO,IA6BxBa,EAxBG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAMnB,OACE,cAAC,IAAD,CAAQF,cAAeA,EAAeG,SAAUjB,EAAYkB,SAN/C,SAACjB,GACd,IDQ+BG,ECPzBF,EDmCwB,SAACiB,GACjC,IAAMjB,EAAgB,CACpBkB,MAAO,GACPC,MAAO,IAEHC,EAAM,IAAIC,IAChBJ,EAAMK,SAAQ,SAACC,GACb,KAAIA,EAAKf,OAAS,GAAlB,CACA,IAAMgB,EAAQD,EAAK,GACbE,EAAQF,EAAK,GACnBH,EAAIM,IAAI,CAAEC,GAAIH,IACdJ,EAAIM,IAAI,CAAEC,GAAIF,IACdzB,EAAMmB,MAAMS,KAAK,CACfC,OAAQL,EACRM,OAAQL,QAGZ,IAAMM,EAAgBzB,MAAM0B,KAAKZ,GAEjC,OADApB,EAAMkB,MAAQa,EACP/B,ECtDSiC,EDOiB/B,ECRGH,EAAOC,MDS9BG,KAAKC,MAAMF,GACOgC,KAAI,SAACC,GAClC,OAAOA,EAAID,KAAI,SAACE,GACd,OAAOjC,KAAKkC,UAAUD,WCVxBtB,EAAKd,IAGL,SACG,gBAAGC,EAAH,EAAGA,OAAQqC,EAAX,EAAWA,aAAX,OACC,eAAC,IAAD,CAAMC,UAAU,cAAcvB,SAAUsB,EAAxC,UACE,cAAC,IAAD,CAAOE,KAAK,QAAQC,KAAK,UACzB,wBAAQD,KAAK,SAASE,SAAUC,OAAOC,KAAK3C,GAAQO,OAAS,EAA7D,kBAGA,uBACA,sBAAM+B,UAAU,cAAhB,SACE,cAAC,IAAD,CAAcE,KAAK,QAAQI,UAAU,iBCUlCC,EA1BQ,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAsB,EACtBC,oBAAS,GADa,mBACvCC,EADuC,KACjCC,EADiC,KAExCC,EAAQ,cACRC,EAAc,kBAAMF,GAAQ,IAMlC,OACE,qCACE,cAACG,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAHX,kBAAML,GAAQ,IAG7B,SACGC,IAEH,eAACK,EAAA,EAAD,CAAOP,KAAMA,EAAMQ,OAAQL,EAA3B,UACE,cAACI,EAAA,EAAME,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACH,EAAA,EAAMI,MAAP,UAAcT,MAEhB,cAACK,EAAA,EAAMK,KAAP,UACE,cAAC,EAAD,CAAW/C,KAfN,SAACd,GACZ+C,EAAS/C,GACToD,gBCTEU,EAAW,CACfC,iCAAiC,EACjCC,uBAAuB,EACvBC,OAAQC,OAAOC,YACfC,MAAOF,OAAOG,WACdC,KAAM,CACJC,MAAO,QACPC,KAAM,IACNC,qBAAsB,QAExBC,KAAM,CACJC,eAAgB,QAGdC,EAAO,CACX1D,MAAO,CAAC,CAAES,GAAI,SAAW,CAAEA,GAAI,SAAW,CAAEA,GAAI,UAChDR,MAAO,CACL,CAAEU,OAAQ,QAASC,OAAQ,SAC3B,CAAED,OAAQ,QAASC,OAAQ,WAkBhB+C,EAfG,WAAO,IAAD,EACI7B,mBAAS4B,GADb,mBACfE,EADe,KACRC,EADQ,KAOtB,OACE,qCACE,cAAC,EAAD,CAAgBhC,SAPH,SAAC/C,GAChBgF,QAAQC,IAAI,QAASjF,GACrB+E,EAAS/E,MAMP,cAAC,QAAD,CAAO2B,GAAG,WAAWiD,KAAME,EAAOI,OAAQpB,QCzBjCqB,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCQSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0edb3755.chunk.js","sourcesContent":["interface INode {\n  id: string;\n}\ninterface ILink {\n  source: string;\n  target: string;\n}\nexport interface IGraph {\n  nodes: INode[];\n  links: ILink[];\n}\nexport interface IState {\n  graph: string;\n}\nexport interface IError {\n  graph?: string;\n}\n\nexport const convertInputToData = (input: string) => {\n  const temp = JSON.parse(input);\n  const graph: string[][] = temp.map((arr: Object[]) => {\n    return arr.map((item) => {\n      return JSON.stringify(item);\n    });\n  });\n  return graph;\n};\nexport const validation = (values: IState) => {\n  const invalidInput = (input: string) => {\n    let graph;\n    try {\n      graph = JSON.parse(input);\n    } catch (error) {\n      return true;\n    }\n    if (!Array.isArray(graph) || graph.length === 0) return true;\n    const res: boolean = graph.some((subArray) => !Array.isArray(subArray) || subArray.length < 2);\n    return res;\n  };\n  const { graph } = values;\n  const errors: IError = {};\n  if (!graph || invalidInput(graph)) {\n    errors.graph = \"Invalid Graph (eg. [[1,2],[3,4]]\";\n  }\n  return errors;\n};\nexport const convertEdgesToLink = (edges: string[][]): IGraph => {\n  const graph: IGraph = {\n    nodes: [],\n    links: [],\n  };\n  const set = new Set();\n  edges.forEach((edge) => {\n    if (edge.length < 2) return;\n    const node1 = edge[0];\n    const node2 = edge[1];\n    set.add({ id: node1 });\n    set.add({ id: node2 });\n    graph.links.push({\n      source: node1,\n      target: node2,\n    });\n  });\n  const temp: INode[] = Array.from(set) as INode[];\n  graph.nodes = temp;\n  return graph;\n};\n","import { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { convertEdgesToLink, convertInputToData, IGraph, IState, validation } from \"./GraphUtil\";\n\nconst initialValues: IState = { graph: \"\" };\n\ntype Props = {\n  save: (graph: IGraph) => void;\n};\nconst GraphForm = ({ save }: Props) => {\n  const submit = (values: any) => {\n    const matrix = convertInputToData(values.graph);\n    const graph = convertEdgesToLink(matrix);\n    save(graph);\n  };\n  return (\n    <Formik initialValues={initialValues} validate={validation} onSubmit={submit}>\n      {({ errors, handleSubmit }) => (\n        <Form className=\"text-center\" onSubmit={handleSubmit}>\n          <Field type=\"graph\" name=\"graph\" />\n          <button type=\"submit\" disabled={Object.keys(errors).length > 0}>\n            Save\n          </button>\n          <br />\n          <span className=\"text-danger\">\n            <ErrorMessage name=\"graph\" component=\"div\" />\n          </span>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default GraphForm;\n","import { useState } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport GraphForm from \"./GraphForm\";\nimport { IGraph } from \"./GraphUtil\";\n\ntype Props = {\n  getGraph: (graph: IGraph) => void;\n};\nconst GraphModalForm = ({ getGraph }: Props) => {\n  const [show, setShow] = useState(false);\n  const title = \"Input Graph\";\n  const handleClose = () => setShow(false);\n  const save = (graph: IGraph) => {\n    getGraph(graph);\n    handleClose();\n  };\n  const handleShow = () => setShow(true);\n  return (\n    <>\n      <Button variant=\"primary\" onClick={handleShow}>\n        {title}\n      </Button>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>{title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <GraphForm save={save} />\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default GraphModalForm;\n","import { useState } from \"react\";\nimport { Graph } from \"react-d3-graph\";\nimport GraphModalForm from \"./GraphModalForm\";\nimport { IGraph } from \"./GraphUtil\";\n\nconst myConfig = {\n  automaticRearrangeAfterDropNode: true,\n  nodeHighlightBehavior: true,\n  height: window.innerHeight,\n  width: window.innerWidth,\n  node: {\n    color: \"green\",\n    size: 320,\n    highlightStrokeColor: \"blue\",\n  },\n  link: {\n    highlightColor: \"red\",\n  },\n};\nconst data = {\n  nodes: [{ id: \"Harry\" }, { id: \"Sally\" }, { id: \"Alice\" }],\n  links: [\n    { source: \"Harry\", target: \"Sally\" },\n    { source: \"Harry\", target: \"Alice\" },\n  ],\n};\nconst GraphView = () => {\n  const [state, setstate] = useState(data);\n  const getGraph = (graph: IGraph) => {\n    console.log(\"graph\", graph);\n    setstate(graph);\n  };\n\n  return (\n    <>\n      <GraphModalForm getGraph={getGraph} />\n      <Graph id=\"graph-id\" data={state} config={myConfig} />\n    </>\n  );\n};\n\nexport default GraphView;\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport GraphView from \"./Pages/Graph/GraphView\";\nfunction App() {\n  return (\n    <>\n      <GraphView />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}